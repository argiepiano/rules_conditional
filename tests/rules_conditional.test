<?php
/**
 * @file
 * SimpleTest testing suites.
 */

/**
 * Base class for conditional rules testing.
 */
abstract class RulesConditionalBaseTestCase extends DrupalWebTestCase {
  /**
   * Asserts a test message from the execution of a rule configuration.
   *
   * @param $error
   * @param RulesPlugin $config
   * @param array $args
   * @param string $message
   */
  protected function assertExecution($error, $config, array $args = array(), $message = '') {
    if (empty($message)) {
      $message = t('Message "@error" captured by executing rule configuration.', array($error));
    }
    try {
      $config->executeByArgs($args);
      $this->assert(FALSE, $message);
    }
    catch (RulesConditionalTestException $ex) {
      $this->assertEqual($error, $ex->getMessage(), $message);
    }
  }
}

/**
 * Framework tests.
 */
class RulesConditionalFrameworkTestCase extends RulesConditionalBaseTestCase {
  /**
   * Returns test info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Framework',
      'description' => 'Test the core conditional plugin framework.',
      'group' => 'Conditional Rules',
    );
  }

  /**
   * Sets up test case.
   */
  protected function setUp() {
    parent::setUp('rules_conditional_test');
  }

  /**
   * Tests plugin label.
   */
  public function testPluginLabel() {
    $container = new RulesConditionalTestStubContainer();
    $label = $container->label();
    $this->assertEqual('Stub conditional', $label, 'Default conditional container label uses the plugin label.');

    $branch = new RulesConditionalTestStubElement();
    $label = $branch->label();
    $this->assertEqual('Stub conditional element', $label, 'Default conditional element label uses the plugin label.');
  }

  /**
   * Tests intercepting a method.
   */
  public function testInterceptMethod() {
    $message = 'Test magic method is intercepted.';
    try {
      $conditional = new RulesConditionalTestStubContainer();
      $conditional->test();
      $this->assert(FALSE, $message);
    }
    catch (Exception $ex) {
      $this->assertEqual('intercept', $ex->getMessage(), $message);
    }
  }

  /**
   * Tests fluent interface.
   */
  public function testFluentInterface() {
    $conditional = new RulesConditionalTestStubContainer();
    $container1 = new RulesActionSet();
    $conditional->fluent($container1)->action('drupal_message', array('message' => '[site:name]'));
    $this->assertEqual(1, count($container1->elements()), 'Fluent interface adds action to the active element.');
    $container2 = new RulesActionSet();
    $conditional->fluent($container2)->action('drupal_message', array('message' => '[site:name]'));
    $this->assertEqual(1, count($container1->elements()), 'Fluent interface does not add action to a previously active element.');
  }

  /**
   * Tests branch sibling methods.
   */
  public function testBranchSibling() {
    // Set up stub objects.
    $conditional = new RulesConditionalTestStubContainer();
    $branch1 = new RulesConditionalTestStubElement();
    $branch1->setParent($conditional);
    $branch2 = new RulesConditionalTestStubElement();
    $branch2->setParent($conditional);
    $orphanBranch = new RulesConditionalTestStubElement();

    // Test obtaining siblings.
    $this->assertIdentical($branch2, $branch1->getNextSibling(), 'Next sibling branch can be obtained.');
    $this->assertIdentical($branch1, $branch2->getPreviousSibling(), 'Previous sibling branch can be obtained.');
    $this->assertNull($branch1->getPreviousSibling(), 'First branch has no previous sibling.');
    $this->assertNull($branch2->getNextSibling(), 'Last branch has no next sibling.');

    // Test obtaining siblings from an orphan element.
    $this->assertNull($orphanBranch->getNextSibling(), 'Orphan branch has no next sibling.');
    $this->assertNull($orphanBranch->getPreviousSibling(), 'Orphan branch has no previous sibling.');
  }

  /**
   * Tests basic evaluation.
   */
  public function testEvaluate() {
    // Set up stub objects.
    $conditional = new RulesConditionalTestStubContainer();
    $branch = new RulesConditionalTestStubElement();
    $branch->action('rules_conditional_test_throw', array('message' => 'evaluate'))
      ->setParent($conditional);
    $defaultBranch = new RulesConditionalTestStubDefaultElement();
    $defaultBranch->action('rules_conditional_test_throw', array('message' => 'evaluate default'))
      ->setParent($conditional);

    // Evaluate an element.
    $this->assertExecution('evaluate', $conditional, array(), 'Evaluating container evaluates elements.');
    $branch->setPass(FALSE);
    $this->assertExecution('evaluate default', $conditional, array(), 'Evaluating container evaluates default elements.');
  }
}

/**
 * Default if-else tests.
 */
class RulesConditionalTestCase extends RulesConditionalBaseTestCase {
  /**
   * Returns test info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Default conditional',
      'description' => 'Test the if-else plugins.',
      'group' => 'Conditional Rules',
    );
  }

  /**
   * Tests integrity check.
   */
  public function testIntegrityCheck() {
    // TODO
  }

  /**
   * Tests evaluation.
   */
  public function testEvaluate() {
    // TODO
  }

  /**
   * Tests exporting.
   */
  public function testExport() {
    // TODO
  }

  /**
   * Tests exporting.
   */
  public function testImport() {
    // TODO
  }
}

/**
 * Switch tests.
 */
class RulesConditionalSwitchTestCase extends RulesConditionalBaseTestCase {
  /**
   * Returns test info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Switch',
      'description' => 'Test the switch plugins.',
      'group' => 'Conditional Rules',
    );
  }

  /**
   * Tests integrity check.
   */
  public function testIntegrityCheck() {
    // TODO
  }

  /**
   * Tests evaluation.
   */
  public function testEvaluate() {
    // TODO
  }

  /**
   * Tests exporting.
   */
  public function testExport() {
    // TODO
  }

  /**
   * Tests exporting.
   */
  public function testImport() {
    // TODO
  }
}

/**
 * While tests.
 */
class RulesConditionalWhileTestCase extends RulesConditionalBaseTestCase {
  /**
   * Returns test info.
   */
  public static function getInfo() {
    return array(
      'name' => 'While',
      'description' => 'Test the while plugin.',
      'group' => 'Conditional Rules',
    );
  }

  /**
   * Tests integrity check.
   */
  public function testIntegrityCheck() {
    // TODO
  }

  /**
   * Tests evaluation.
   */
  public function testEvaluate() {
    // TODO
  }

  /**
   * Tests exporting.
   */
  public function testExport() {
    // TODO
  }

  /**
   * Tests exporting.
   */
  public function testImport() {
    // TODO
  }
}

/**
 * UI tests.
 */
class RulesConditionalUITestCase extends RulesConditionalBaseTestCase {
  /**
   * Returns test info.
   */
  public static function getInfo() {
    return array(
      'name' => 'User interface',
      'description' => 'Test the user interface implementations for conditional plugins.',
      'group' => 'Conditional Rules',
    );
  }

  /**
   * Sets up test case.
   */
  protected function setUp() {
    parent::setUp('rules_conditional_test', 'rules_admin');
  }

  /**
   * Tests RulesConditionalPluginUI.
   */
  public function testBaseUI() {
    // TODO
  }

  /**
   * Tests RulesConditionalEmptyUI.
   */
  public function testEmptyUI() {
    // TODO
  }

  /**
   * Tests RulesConditionalPredicateUI.
   */
  public function testPredicateUI() {
    // TODO
  }

  /**
   * Tests RulesConditionalCaseUI.
   */
  public function testCaseUI() {
    // TODO
  }
}
