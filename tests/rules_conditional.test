<?php
/**
 * @file
 * SimpleTest testing suites.
 */

/**
 * Framework tests.
 */
class RulesConditionalFrameworkTestCase extends DrupalWebTestCase {
  /**
   * Returns test info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Framework',
      'description' => 'Test the core conditional plugin framework.',
      'group' => 'Conditional Rules',
    );
  }

  /**
   * Sets up test case.
   */
  protected function setUp() {
    parent::setUp('rules_conditional_test');
  }

  /**
   * Tests plugin label.
   */
  public function testPluginLabel() {
    $conditional = new RulesConditionalTestStubPlugin();
    $label = $conditional->label();
    $this->assertEqual('Stub conditional', $label, 'Default conditional element label uses the plugin label.');

    $branch = new RulesConditionalTestStubBranchPlugin();
    $label = $branch->label();
    $this->assertEqual('Stub conditional branch', $label, 'Default conditional branch element label uses the plugin label.');
  }

  /**
   * Tests branch add/remove methods.
   */
  public function testParentBranchOperation() {
    // Set up stub objects.
    $conditional = new RulesConditionalTestStubPlugin();
    $branch = new RulesConditionalTestStubBranchPlugin();

    // Add branch to conditional.
    $conditional->addBranch($branch);
    $iterator = $conditional->getIterator();
    $this->assertEqual(1, count($iterator), 'Branch can be added to conditional.');
    $this->assertIdentical($branch, $iterator->current(), 'Added branch is a child element of conditional.');

    // Remove branch from conditional.
    $conditional->removeBranch($branch);
    $this->assertEqual(0, count($conditional->getIterator()), 'Branch can be removed from conditional.');
  }

  /**
   * Tests setting a conditional as the parent of a branch.
   */
  public function testBranchSetParent() {
    // Set up stub objects.
    $conditional = new RulesConditionalTestStubPlugin();
    $branch = new RulesConditionalTestStubBranchPlugin();

    // Set conditional as parent of branch.
    $branch->setParent($conditional);
    $this->assertIdentical($conditional, $branch->parentElement(), 'Conditional can be set as parent of branch.');
    $iterator = $conditional->getIterator();
    $this->assertTrue(count($iterator) == 1 && $iterator->current() === $branch, 'Branch is added as a child element to the parent conditional.');

    // Set another conditional as parent of branch.
    $conditional2 = new RulesConditionalTestStubPlugin();
    $branch->setParent($conditional2);
    $this->assertIdentical($conditional2, $branch->parentElement(), 'Branch parent can be changed.');
    $this->assertEqual(0, count($conditional->getIterator()), 'Branch is removed from old parent.');

    // Set an incompatible parent.
    $message = 'Branch prevents incompatible parent from being set.';
    try {
      $incompatibleContainer = new RulesActionSet();
      $branch->setParent($incompatibleContainer);
      $this->assert(FALSE, $message);
    }
    catch (RulesEvaluationException $ex) {
      $this->assert(TRUE, $message);
    }
  }

  /**
   * Tests branch sibling methods.
   */
  public function testBranchSibling() {
    // Set up stub objects.
    $conditional = new RulesConditionalTestStubPlugin();
    $branch1 = new RulesConditionalTestStubBranchPlugin();
    $branch1->setParent($conditional);
    $branch2 = new RulesConditionalTestStubBranchPlugin();
    $branch2->setParent($conditional);
    $orphanBranch = new RulesConditionalTestStubBranchPlugin();

    // Test obtaining siblings.
    $this->assertIdentical($branch2, $branch1->getNextSibling(), 'Next sibling branch can be obtained.');
    $this->assertIdentical($branch1, $branch2->getPreviousSibling(), 'Previous sibling branch can be obtained.');
    $this->assertNull($branch1->getPreviousSibling(), 'First branch has no previous sibling.');
    $this->assertNull($branch2->getNextSibling(), 'Last branch has no next sibling.');

    // Test obtaining siblings from an orphan element.
    $this->assertNull($orphanBranch->getNextSibling(), 'Orphan branch has no next sibling.');
    $this->assertNull($orphanBranch->getPreviousSibling(), 'Orphan branch has no previous sibling.');
  }
}

/**
 * Default if-else tests.
 */
class RulesConditionalTestCase extends DrupalWebTestCase {
  /**
   * Returns test info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Default conditional',
      'description' => 'Test the if-else plugins.',
      'group' => 'Conditional Rules',
    );
  }
}

/**
 * Switch tests.
 */
class RulesConditionalSwitchTestCase extends DrupalWebTestCase {
  /**
   * Returns test info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Switch',
      'description' => 'Test the switch plugins.',
      'group' => 'Conditional Rules',
    );
  }
}

/**
 * UI tests.
 */
class RulesConditionalUITestCase extends DrupalWebTestCase {
  /**
   * Returns test info.
   */
  public static function getInfo() {
    return array(
      'name' => 'User interface',
      'description' => 'Test the user interface implementations for conditional plugins.',
      'group' => 'Conditional Rules',
    );
  }

  /**
   * Sets up test case.
   */
  protected function setUp() {
    parent::setUp('rules_conditional_test', 'rules_admin');
  }
}
